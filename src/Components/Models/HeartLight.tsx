/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import NoiseMaterial from "../Materials/NoiseMaterial";
import { useRef } from "react";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    lightheart: THREE.Mesh;
  };
  materials: {
    blue: THREE.MeshStandardMaterial;
  };
};

export function HeartLight(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/heartlight.glb") as GLTFResult;

  const uTime = useRef({ value: 0 });

  useFrame(({ clock: { elapsedTime } }) => {
    uTime.current.value = elapsedTime;
  });

  return (
    <>
      {/* <pointLight position={[0.5, 0.01, 0.5]} args={["lightblue", 0.2]} /> */}

      <group {...props} dispose={null}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.lightheart.geometry}
          // material={materials.blue}
        >
          <NoiseMaterial uniforms={{ uTime: uTime.current }} />
          {/* <meshStandardMaterial
            color={"black"}
            emissive={"black"}
            emissiveIntensity={1}
            toneMapped={false}
          /> */}
        </mesh>
      </group>
    </>
  );
}

useGLTF.preload("/heartlight.glb");
